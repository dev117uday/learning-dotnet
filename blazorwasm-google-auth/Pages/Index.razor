@page "/"
@using Newtonsoft.Json
@using GoogleAuth.Models
@using System.Net

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration
@inject HttpClient Http
@inject IConfiguration Configuration

@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorage

<h1>Hello, world!</h1>

<div class="alert alert-warning" role="alert">
    Before authentication will function correctly, you must configure your provider details in <code>Program.cs</code>
</div>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@code {

    private async Task<string> GetIdToken()
    {
        var token = await _sessionStorage.GetItemAsync<string>($"oidc.user:{Configuration["clientId"]}");
        var tokenClass = JsonConvert.DeserializeObject<Token>(token);
        return tokenClass.id_token;
    }

    protected override async Task OnInitializedAsync()
    {
        var jwtKey = await _localStorage.GetItemAsync<string>("jwt");
        var oidc = await
        _sessionStorage.GetItemAsync<string>($"oidc.user:{Configuration["clientId"]}");

        if (jwtKey == null && oidc != null)
        {
            Console.WriteLine("Time to send a request");
            
            var idToken = await GetIdToken();
            var postBody = new { token = idToken };

            var response = await Http.PostAsJsonAsync($"{Configuration["backend"]}/auth/authenticate", postBody);
            var jwt = await response.Content.ReadAsStringAsync();
            Console.WriteLine(jwt);

            await _localStorage.SetItemAsync("jwt", jwt);
        }
    }

}
